#!/usr/bin/env python

import httplib, urllib
from subprocess import call

import zmq

from daemon import runner

SUB_HOST = "10.0.3.36" # aggregator
SUB_PORT = 5555

TTS_HOST = "10.0.3.1"
TTS_PORT = 59125

class SpeakMessage():
    def __init__(self):
        self.stdin_path = '/dev/null'
        self.stdout_path = '/dev/tty'
        self.stderr_path = '/dev/tty'
        self.pidfile_path =  '/tmp/sam-speakd.pid'
        self.pidfile_timeout = 5

    def run(self):
        sub_context = zmq.Context()
        subscriber = sub_context.socket (zmq.SUB)
        sub_address = "tcp://%s:%d" % (SUB_HOST, SUB_PORT)
        subscriber.connect (sub_address)
        subscriber.setsockopt (zmq.SUBSCRIBE, "SPEAK")

        # daemon loop
        while True:
            print "looping"
            message = subscriber.recv()
            print message
            self.say(message[6:])

    def say(self, message):
        raw_params = {"INPUT_TEXT": message,
                      "INPUT_TYPE": "TEXT",
                      "OUTPUT_TYPE": "AUDIO",
                      "LOCALE": "en_US",
                      "VOICE": "dfki-spike",
                      "AUDIO": "WAVE_FILE",
                     }
        params = urllib.urlencode(raw_params)
        headers = {}

        conn = httplib.HTTPConnection(TTS_HOST, TTS_PORT)

        conn.request("POST", "/process", params, headers)
        response = conn.getresponse()

        if response.status == 200:
            sound = response.read()
            temp_file = open('/tmp/sam-speech.wav', 'w')
            temp_file.write(sound)
            temp_file.close()
            call(['play', '/tmp/sam-speech.wav'])


app = SpeakMessage()
daemon_runner = runner.DaemonRunner(app)
daemon_runner.do_action()
