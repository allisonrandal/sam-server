#!/usr/bin/env python

import zmq
import time

import gobject
import pygst
pygst.require('0.10')
gobject.threads_init()
import gst

#from daemon import runner

PUB_HOST = "10.0.3.1"
PUB_PORT = 5559

class ListenRoom():
    def __init__(self):
#        self.stdin_path = '/dev/null'
#        self.stdout_path = '/dev/tty'
#        self.stderr_path = '/dev/tty'
#        self.pidfile_path =  '/tmp/sam-heard.pid'
#        self.pidfile_timeout = 5

        self.init_gst()
        pub_context = zmq.Context()
        self.publisher = pub_context.socket (zmq.PUB)
        pub_address = "tcp://%s:%d" % (PUB_HOST, PUB_PORT)
        self.publisher.bind (pub_address)


    def init_gst(self):
        """Initialize the speech components"""
        self.pipeline = gst.parse_launch('gconfaudiosrc ! audioconvert ! audioresample '
                                         + '! vader name=vad auto-threshold=true '
                                         + '! pocketsphinx name=asr ! fakesink')
        asr = self.pipeline.get_by_name('asr')
        asr.connect('result', self.asr_result)
        asr.set_property('fsg', '../language/samgrammar.fsg')
        asr.set_property('dict', '../language/samlexicon.dic')
        asr.set_property('configured', True)

        bus = self.pipeline.get_bus()
        bus.add_signal_watch()
        bus.connect('message::application', self.application_message)

        self.pipeline.set_state(gst.STATE_PAUSED)

    def asr_result(self, asr, text, uttid):
        """Forward result signals on the bus to the main thread."""
        struct = gst.Structure('result')
        struct.set_value('hyp', text)
        struct.set_value('uttid', uttid)
        asr.post_message(gst.message_new_application(asr, struct))

    def application_message(self, bus, msg):
        """Receive application messages from the bus."""
        msgtype = msg.structure.get_name()
        if msgtype == 'result':
            self.final_result(msg.structure['hyp'], msg.structure['uttid'])

    def final_result(self, hyp, uttid):
        """Insert the final result."""
        print(hyp)
        clean = hyp.encode('ascii','ignore')
        self.publisher.send('HEAR ' + clean)



app = ListenRoom()
#daemon_runner = runner.DaemonRunner(app)
#daemon_runner.do_action()
mainloop = gobject.MainLoop()
app.pipeline.set_state (gst.STATE_PLAYING)
mainloop.run()
